from IMojoCodec.codec import Codec

from testing import assert_true
from IMojoCodec.utils import concat_bytes, concat_2_byte, Endian, Array
from IMojoCodec.binary_types import ui32, ui16, ui8, i8

struct CompressionType:
    alias BI_RGB = 0
    alias BI_RLE8 = 1
    alias BI_RLE4 = 2
    alias BI_BITFIELDS = 3
    alias BI_JPEG = 4
    alias BI_PNG = 5
    alias BI_ALPHABITFIELDS = 6
    alias BI_CMYK = 11
    alias BI_CMYKRLE8 = 12
    alias BI_CMYKRLE4 = 13


struct BmpHeader(Stringable):
    var file_size: ui32
    var reserved:  ui32
    var data_offset:  ui32
   
    fn __init__(inout self, data: Array[i8]) raises:
        assert_true(data.size == 12, "Invalid header length.")
        self.file_size = concat_bytes(data[:4])
        self.reserved = concat_bytes(data[4:8])
        self.data_offset = concat_bytes(data[8:])

    fn __str__(self) -> String:
        return "file_size: " + str(self.file_size) + "\n" + "data_offset: " + str(self.data_offset)

@value
struct DibHeader(Stringable):
    var isSet: Bool
    var header_type: Int
    var header_size: Int
    var image_width: Int
    var image_height: Int
    var color_planes:Int
    var bits_per_pixel: Int
    var compression: Int
    var data_size: Int
    var pixel_per_m_hor: Int
    var pixel_per_m_vert: Int
    var num_colors: Int
    var num_important_color: Int

    var yFlip: Bool
    fn __init__(inout self, data: Array[i8], header_type: Int) raises:
        self.header_type = header_type
        self.compression = 0
        self.data_size = 0
        self.pixel_per_m_hor = 0
        self.pixel_per_m_vert = 0 
        self.num_colors = 0
        self.num_important_color = 0
        self.yFlip = False

        if header_type == 12:
            self.header_size = concat_bytes(data[0:4]).to_int()
            self.image_width = concat_bytes(data[4:6]).to_int()
            self.image_height = concat_bytes(data[6:8]).to_int()
            self.color_planes = concat_bytes(data[8:10]).to_int()
            self.bits_per_pixel = concat_2_byte(data[10:12]).to_int()


        elif header_type == 40
            or header_type == 64
            or header_type == 108
            or header_type == 124:

            self.header_size = concat_bytes(data[0:4]).to_int()
            self.image_width = concat_bytes(data[4:8]).to_int()
            self.image_height = concat_bytes(data[8:12]).to_int()
            self.color_planes = concat_2_byte(data[12:14]).to_int()
            self.bits_per_pixel = concat_2_byte(data[14:16]).to_int()
            self.compression = concat_bytes(data[16:20]).to_int()
            self.data_size = concat_bytes(data[20:24]).to_int()
            self.pixel_per_m_hor = concat_bytes(data[24:28]).to_int()
            self.pixel_per_m_vert = concat_bytes(data[28:32]).to_int()
            self.num_colors = concat_bytes(data[32:36]).to_int()
            self.num_important_color = concat_bytes(data[36:]).to_int()
        
        else:
            raise Error("Unknown Dib Header size" + str(header_type))

        self.isSet = True
      
    
    fn __str__(self) -> String:
        return "header_type: " + str(self.header_type) 
            + "\n" + "header_size: " + str(self.header_size)
            + "\n" + "image_width: " + str(self.image_width)
            + "\n" + "image_height: " + str(self.image_height)
            + "\n" + "color_planes: " + str(self.color_planes)
            + "\n" + "bits_per_pixel: " + str(self.bits_per_pixel)
            + "\n" + "compression: " + str(self.compression)
            + "\n" + "data_size: " + str(self.data_size)
            + "\n" + "pixel_per_m_hor: " + str(self.pixel_per_m_hor)
            + "\n" + "pixel_per_m_vert: " + str(self.pixel_per_m_vert)
            + "\n" + "num_colors: " + str(self.num_colors)
            + "\n" + "num_important_color: " + str(self.num_important_color)
        

struct BmpCodec(Codec):
    var header: BmpHeader
    # var dibHeader: DibHeader

    fn __init__(inout self, data: Array[i8]) raises:
        self.header = BmpHeader(data)

    fn decode[dtype: DType](inout self, data: Array[i8]) raises -> Tensor[dtype]:
        let dib_header_size = self.get_dib_header_size(data[0:4])
        let header_end = dib_header_size.to_int()
        let dib = self.get_dib_header(data[:header_end])

        print(dib)

        if not dib.isSet:
            raise Error("Dib header was not set")


        if dib.compression == CompressionType.BI_RGB and dib.bits_per_pixel == 24:
            let channels = 3
            var image = Tensor[dtype](dib.image_height, dib.image_width, channels)
            let data_ptr = image._ptr
            let padding =  (4 - (dib.image_width * channels) % 4) % 4
            let row_size = dib.image_width * channels + padding

            for y in range(dib.image_height):
                for x in range(dib.image_width):
                    let offset = ((dib.image_height - 1 - y) * row_size) + (x * channels)
                    image.__setitem__(VariadicList(y, x, 0), memory.unsafe.bitcast[dtype](data[offset]))
                    image.__setitem__(VariadicList(y, x, 1), memory.unsafe.bitcast[dtype](data[offset + 1]))
                    image.__setitem__(VariadicList(y, x, 2), memory.unsafe.bitcast[dtype](data[offset + 2]))

            return image        

        else:
            raise Error("Compressiontype not implemented")

    


    @staticmethod
    fn encode[dtype: DType](data: Array[i8]) raises -> Tensor[DType.uint8]:
        ...
    
    @staticmethod
    fn check_signature(data: Array[i8]) raises -> Bool:

        if data.size != 2:
            return False
        if data[0] != 0x42 and data[1] != 0x4D: # check if signature is "BM"
            return False
        return True


    fn set_header(inout self, data: Array[i8]) raises:
        self.header = BmpHeader(data)

    fn get_dib_header_size(inout self, data: Array[i8]) raises -> ui32:
        return concat_bytes(data[0:4])

    fn get_dib_header(inout self, data: Array[i8]) raises -> DibHeader:
        let dib_headersize = concat_bytes(data[0:4]).to_int()
        if dib_headersize == 12:
            print("BitmapCoreheader")
        elif dib_headersize == 16:
            print("OS22XBITMAPHEADER")
        elif dib_headersize == 64:
            print("OS22XBITMAPHEADER2")
        elif dib_headersize == 40:
            print("BITMAPINFOHEADER")
        elif dib_headersize == 52:
            print("BITMAPV2INFOHEADER")
        elif dib_headersize == 56:
            print("BITMAPV3INFOHEADER")
        elif dib_headersize == 108:
            print("BITMAPV4HEADER")
        elif dib_headersize == 124:
            print("BITMAPV5HEADER")
        else:
            raise Error("Unknown header size: " + str(dib_headersize))

        print(dib_headersize)
        return DibHeader(data, dib_headersize)